swagger: '2.0'
info:
  title: Organicity Accounts - Permission Component
  description: |
    Several functions of Organicity are not available to any user, but
    require additional permissions to be executed. This component
    streamlines the handling of reading, editing and assigning roles and permissions
    for specific users, and the reading and editing of clients.

    The functionalities in this document are only available to the
    service accounts of clients, and require appropriate roles
    themselves, which is documented per resource.

  version: 0.3.0-development

schemes:
  - https
host: accounts.organicity.eu
basePath: /permissions/

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      Every API call must be authorized with a Bearer Token in the HTTP header
      (Authorization: Bearer <TOKEN>) provided by OrganiCity Accounts -
      https://accounts.organicity.eu
definitions:

  RedirectUris:
    title: A list of redirect URIs
    description: |
      This JSON object represents a list of redirect URIs
    type: object
    required:
    - redirectUris
    properties:
      redirectUris:
        type: array
        items:
          type: "string"
          description: |
            All items should be URIs
        description: |
          An array of redirectUris
        example:
          {
            "redirectUris": [
              "https://example.com/callback",
              "https://login.example.com/callback"
            ]
          }

  Client:
    title: Representation of a client
    description: |
      This JSON object is needed to create a client.
    type: object
    required:
      - clientName
      - clientUri
      - redirectUri
    properties:
      clientName:
        type: string
        description: |
          A name for the client
      clientUri:
        type: string
        description: |
          The URI of a client
      redirectUri:
        type: string
        description: |
          A redirect URI for a client
    example:
      {
        "clientName": "A client name",
        "clientUri": "http://localhost",
        "redirectUri": "http://localhost"
      }

  ClientCredentials:
    title: Representation of client credentials
    description: |
      This JSON object contains the credentials of a client
    type: object
    required:
      - client_id
      - secret
    properties:
      client_id:
        type: string
        description: |
          The unique id of a client
      secret:
        type: string
        description: |
          The secred (e.g., the password) of the client
    example:
      {
        "client_id": "c6e3c4ae-37e8-4662-b201-65ddb9bca6ff",
        "secret": "e49545ba-48a0-40de-9ad9-ea75ca23f15f"
      }

  Role:
    title: Representation of a single role
    description: |
      This JSON object represents a role.

      The actual roles are managed by the Organicity Permissions.
      Roles are represented by strings, which can come in two flavours:

      A role might be a global **role**, applying to all of Organicity, or
      it might be specific to a single tool (a Client from the view of
      Organicity Accounts). A tool-specific role is called **permission** and
      is always prefixed with the tool name and a colon.

      For example, the global role to create a new asset can be `experimenter`
      or `participant`.
      In contrast, the specific role of an administrator of the Scenario Tool
      is called: `scenarios:admin`.

      **Note**: tool-specific permissions are only visible to the respective
      tools. Consequently, when a tool queries the Permission
      Component for the roles/permission of a single user, only the global roles
      and the permission specific to the querying tool are returned.

      The following roles for users are available:

      * OC User - Everybody that is registered at OrganiCity, but does not participate in experiments
      * `experimenter` - OC Experimenter - People that promote and implement an experiment with the OC Platform
      * `participant` - OC Participant - People that participate in an experiment, e.g., by running it on their smartphones
      * `sitemanager` - OC Site Manager -
      > TODO
      * `administator` - OC Administrator - Technical administration and support, e.g., the OC Facility administrator

      The following roles for clients are available:

      * `ocsite` - OC Site - A Client, which represents a OC City Site
      * `provider` - OC Provider -
      > TODO

      The following permission are available (representative selection):

      * Account Permissions:
        * `accounts-permissions:readGlobalRoles`, which allows reading global roles assigned to a user.
        * `accounts-permissions:readLocalRoles`, which allows reading roles specific the requesting client assigned to a user.
        * `accounts-permissions:editGlobalRoles`, which allows adding or removing global roles to or from a user.
        * `accounts-permissions:editLocalRoles`, which allows adding or removing roles specific to the requesting client to or from a user.
        * `accounts-permissions:listUsers`, which allows listing of all users.
        * `accounts-permissions:findUserByEmail`, which allows to find users by an email.
        * `accounts-permissions:createClient`, which allows to create a client
        * `accounts-permissions:readClientRedirectUris`, which allows reading the redirect urls beloning to a client
        * `accounts-permissions:editClientRedirectUris`, which allows editing the redirect urls beloning to a client
      * Scenarios:
        * `scenarios:moderator`
        * `scenarios:admin`
      * Site Manager:
        * `site-manager:role-admin`
        * `site-manager:dictionary-admin`
        * ...

      **Note**: Some composite permissions are given, thus an user with the role `administrator`
        has the permissions `scenarios:admin` and `site-manager:role-admin`

    type: object
    required:
      - role
    properties:
      role:
        type: string
        description: The name of the role
        pattern: "^[a-zA-Z][a-zA-Z0-9-_]+(:[a-zA-Z0-9-_]+)?$"
      experiment:
        type: string
        description: |
          An experiment identifier, denoting the experiment that this
          specific role applies to.

          This field only needs to be set for roles restricted to
          specific experiments. If a query specifies a such a role
          without supplying an experiment id, the query will fail.
    example:
      {
        "role": "experimenter"
      }

  Error:
    title: Representation of an error
    description: |
      These JSON objects are returned when the server encounters an error
      on processing a request, and needs to explain further error
      details to the requesting client.
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: |
          A detailed explanation on why the request failed.
    example:
      { "error": "The requested role does not adhere to the required format." }

  UserIdentifier:
    title: Representation of a short user identifier
    description: |
      This is a simple record of only user id and name, to group
      a system-unique identifier together with a human-readable
      name of a user. This record is deliberatly kept small to
      not leak any privacy-related information.
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
        description: |
          The unique and permanent user identifier.
      name:
        type: string
        description: |
          The self-appointed user name.
    example:
      {
        "id": "0dfc01f7-a234-4cbc-8e70-7ae361127dd4",
        "name": "jackie"
      }

paths:
  /users:
    get:
      security:
        - Bearer: []
      summary: Retrieve a list of users

      description: |
        Permission `accounts-permissions:listUsers` or/and `accounts-permissions:findUserByEmail` required.

        This endpoint supplies a list of available user names and
        userIds that can be used for the more detailed actions.

        Due to privacy resons, this endpoint only returns these two
        fields; more data can only be obtained when the respective
        user performs a successful login through the client and
        supplies an ID Token.

        The endpoint always only returns a part of the list of users
        (paginated), given by the offset (which defaults to `0`) and
        the page length (which defaults to the maximum value of `50`).
        If you want to query for more users, you have to make multiple
        calls to the api.

        The list of users is always sorted alphabetically with regard
        to the user name. The offset into a list is thus not
        guaranteed to always return a list starting with the same
        user, as new users might shift the offset. However, as long as
        the list of users itself does not change, the returned list is
        constant as well.

      produces:
        - application/json

      parameters:
        - name: offset
          in: query
          description: |
            Permission `accounts-permissions:listUsers` required.

            The offset in the list of users, given as the amount of
            users to skip. Defaults to `0`, thus returning the start
            of the list.
          required: false
          type: integer
          minimum: 0
          default: 0

        - name: count
          in: query
          description: |
            Permission `accounts-permissions:listUsers` required.

            The maximum amount of users to return as the result of the
            call. Only values between 1 and 50 are allowed, in order
            to limit the result size. Defaults to `50`.
          default: 50
          type: integer
          minimum: 1
          maximum: 50
          required: false

        - name: email
          in: query
          description: |
            Permission `accounts-permissions:findUserByEmail` required.

            Using this parameter allows to search for a user by an email address.
            If found, an HTTP 200 with a list containing one user will be returned,
            otherwise an HTTP 404 NOT FOUND.
          type: string
          required: false
      responses:
        200:
          description: |
            The requested list of users has been extracted and is
            returned as the body of the reply as an array. If no users matched
            the query (i.e. the offset is too high), an empty
            array may be returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserIdentifier'
            description: |
              An array of user identifiers, along with the
              human-readable user name.
          examples:
            application/json:
              [
                {
                  "id":"cf2c1723-3369-4123-8b32-49abe71c0e57",
                  "name":"fbuether"
                }, {
                  "id":"0dfc01f7-a234-4cbc-8e70-7ae361127dd4",
                  "name":"jackie"
                }
              ]
        422:
          description: |
            The given query parameters where not valid. This might
            occur if either the given offset or count where negative,
            or if count was too large.
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              { "error":
                "The given count is too large." }
        401:
          description: |
            The requesting client did not supply identify information
            (see [Security
            Definitions](#security-definition-OrganicityPermissions)).
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., `accounts-permissions:listUsers` or/and `accounts-permissions:findUserByEmail`)
            to list users.
        404:
          description: |
            Will be returned, if no users will be found. The body will be empty.
        500:
          description: |
            An unknown internal server error occured.

  '/users/{userId}/roles':
    get:
      security:
        - Bearer: []
      summary: Retrieves a list of all available roles of a user

      description: |
        Permission `accounts-permissions:readGlobalRoles` or/and `accounts-permissions:readLocalRoles` required.

        This endpoint retrieves a list of all roles available to the
        supplied user and visible to the requesting tool. This
        includes global roles as well as roles specific to the
        requesting tool.

      produces:
        - application/json

      parameters:
        - name: userId
          in: path
          description: |
            The identifier of the user, as given by the subject field
            in the user's ID Token (the authentication token handed
            out by Organicity Accounts on login).
          required: true
          type: string
      responses:
        200:
          description: |
            The request has been processed and the determined roles
            are returned.

            Note that for a user that has no (visible) roles, an empty
            list is returned.
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
            description: |
              An array of roles, where each role describes a
              role assigned to the user.
          examples:
            application/json:
              [
                { "role": "experimenter"},
                { "role": "scenarios:admin" }
              ]
        401:
          description: |
            The requesting client did not supply identify information
            (see [Security
            Definitions](#security-definition-OrganicityPermissions)).
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., `accounts-permissions:readGlobalRoles` or/and `accounts-permissions:readLocalRoles`)
            to inspect the roles of users.
        404:
          description: |
            The supplied user ID does not denote an existing user.
        500:
          description: |
            An unknown internal server error occured.

    post:
      security:
        - Bearer: []
      summary: Add a role to a user
      description: |
        Permission `accounts-permissions:editGlobalRoles` or/and `accounts-permissions:editLocalRoles` required.

        This endpoint allows tools to assign roles to a specific user,
        effectively allowing the user to perform additional actions.
      produces:
        - application/json
      consumes:
      - application/json

      parameters:
        - name: userId
          in: path
          description: |
            The identifier of the user, as given by the subject field
            in the user's ID Token (the authentication token handed
            out by Organicity Accounts on login).
          required: true
          type: string
        - name: role
          in: body
          description: |
            The new role to be assigned to the user. See the [definition
            of roles](#/definitions/Role) for possible values.
          required: true
          schema:
            $ref: '#/definitions/Role'
      responses:
        201:
          description: |
            The given role was successfully assigned to the specified
            user. This reply is also returned if the role was already
            assigned to the user previously; in that case, no changes
            have been made.
        422:
          description: |
            The supplied role is not valid. This usually means that an
            experiment identifier was required as part of the role,
            but was not supplied.
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              { "error":
                "An Experiment ID is required for the given role, but was not supplied." }
        401:
          description: |
            The requesting client did not supply identify information
            (see [Security
            Definitions](#security-definition-OrganicityPermissions)).
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., Permission `accounts-permissions:editGlobalRoles` or/and `accounts-permissions:editLocalRoles` required.)
            to assign roles to users.
        404:
          description: |
            The supplied user ID does not denote an existing user.
        500:
          description: |
            An unknown internal server error occured.

  '/users/{userId}/roles/{roleName}':
    get:
      security:
        - Bearer: []
      summary: Tests if a user is assigned a specific role

      description: |
        Permission `accounts-permissions:readGlobalRoles` or/and `accounts-permissions:readLocalRoles` required.

        This endpoint can be used if a tool is not interested in the
        complete list of assigned roles, but wants to check one
        specific role for a user.

      produces:
        - application/json

      parameters:
        - name: userId
          in: path
          description: |
            The identifier of the user, as given by the subject field
            in the user's ID Token (the authentication token handed
            out by Organicity Accounts on login).
          required: true
          type: string
        - name: roleName
          in: path
          description: |
            The role to be checked for. This needs to adhere to the
            format specified in the [Role Type
            Definition](#/definitions/Role).
          type: string
          required: true
        - name: experiment
          in: query
          description: |
            This field specifies an experiment to check against. The
            parameter should only be supplied if the given role
            requires an experiment identifier.
          required: false
          type: string

      responses:
        200:
          description: |
            The role is assigned to the user.
        422:
          description: |
            The supplied role is not valid. This usually means that an
            experiment identifier was required as part of the role,
            but was not supplied.
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              { "error":
                "An Experiment ID is required for the given role, but was not supplied." }
        404:
          description: |
            The user ID does not describe a valid user, or the role
            name does not denote a valid role.
        401:
          description: |
            The requesting client did not supply identify information
            (see [Security
            Definitions](#security-definition-OrganicityPermissions)).
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., `accounts-permissions:readGlobalRoles` or/and `accounts-permissions:readLocalRoles`)
            to inspect roles, or the client tried to inspect permissions
            that are not visible to the client (e.g. because they
            belong to a different tool).
        500:
          description: |
            An unknown internal server error occured.

    delete:
      security:
        - Bearer: []
      summary: Removes a specific role from a user

      description: |
        Permission `accounts-permissions:editGlobalRoles` or/and `accounts-permissions:editLocalRoles` required.

        This endpoint allows a requesting client to remove a role from
        a user, effectively revoking permissions or access to specific
        resources.

        This endpoint only allows a requesting tool to manipulate the
        global roles or the roles specific to itself. A tool cannot
        remove permissions assigned to the user that are specific to a
        different tool.

      produces:
        - application/json

      parameters:
        - name: userId
          in: path
          description: |
            The identifier of the user, as given by the subject field
            in the user's ID Token (the authentication token handed
            out by Organicity Accounts on login).
          required: true
          type: string
        - name: roleName
          in: path
          description: |
            The role to be checked for. This needs to adhere to the
            format specified in the [Role Type
            Definition](#/definitions/Role).
          type: string
          required: true
        - name: experiment
          in: query
          description: |
            This field supplies an experiment identifier if the role
            to be deleted is specific for an experiment.
          required: false
          type: string

      responses:
        200:
          description: |
            The given role has been successfully removed from the
            supplied user.
        422:
          description: |
            The supplied role is not valid. This usually means that an
            experiment identifier was required as part of the role,
            but was not supplied.
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              { "error":
                "An Experiment ID is required for the given role, but was not supplied." }
        404:
          description: |
            The user ID does not describe a valid user, or the role
            name does not denote a valid role.
        401:
          description: |
            The requesting client did not supply identify information
            (see [Security
            Definitions](#security-definition-OrganicityPermissions)).
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., `accounts-permissions:editGlobalRoles` or/and `accounts-permissions:editLocalRoles`)
            to remove roles.
        500:
          description: |
            An unknown internal server error occured.

  '/clients':
    post:
      security:
        - Bearer: []
      summary: Create a client
      description: |
        Permission `accounts-permissions:createClient` required.

        This endpoint allows tools to create clients.
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
        - name: client
          in: body
          description: |
            The new client to be created.
          required: true
          schema:
            $ref: '#/definitions/Client'
      responses :
        201:
          description: |
            The client was successfully created.
          schema:
            $ref: '#/definitions/ClientCredentials'
          examples:
            application/json:
              {
                "client_id": "c6e3c4ae-37e8-4662-b201-65ddb9bca6ff",
                "secret": "e49545ba-48a0-40de-9ad9-ea75ca23f15f"
              }
        403:
          description: |
            The requesting client does not have sufficient permissions
            (e.g., `accounts-permissions:createClient`)
            to create a client.
        500:
          description: |
            An unknown internal server error occured.

  '/clients/{clientId}/redirecturis':
    get:
      security:
      - Bearer: []
      summary: Get the redirect URIs for a given `clientId`
      description: |
        Permission `accounts-permissions:readClientRedirectUris` required.

        This endpoint allows tools to get the redirect URIs for clients.
      produces:
      - application/json
      parameters:
      - name: clientId
        in: path
        description: |
          The identifier of the client
        required: true
        type: string
      responses:
        200:
          description: |
            The requested list of redirect URIs returned as the body of
            the reply as an array. If no redirect URIs are available,
            the array will be emtpy
          schema:
            $ref: '#/definitions/RedirectUris'
          examples:
            application/json:
              {
                "redirectUris": [
                  "https://example.com/callback",
                  "https://login.example.com/callback"
                ]
              }
        500:
          description: |
            An unknown internal server error occured.

    put:
      security:
      - Bearer: []
      summary: Update the redirect URIs for a given `clientId`
      description: |
        Permission `accounts-permissions:editClientRedirectUris` required.

        This endpoint allows tools to update the redirect URIs for clients.
        This is a full update, e.g. all existing redirect URIs will
        be *exchanged* by the given one.
      consumes:
      - application/json
      parameters:
      - name: clientId
        in: path
        description: |
          The identifier of the client
        required: true
        type: string
      - name: redirectUris
        in: body
        description: |
          The list of redirect URIs
        required: true
        schema:
          $ref: '#/definitions/RedirectUris'
      responses:
        200:
          description: |
            Just a simple 200 will be returned, if the update was successful
        500:
          description: |
            An unknown internal server error occured.






# TODO
# consumes to all where it fits