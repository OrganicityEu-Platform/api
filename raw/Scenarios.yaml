swagger: '2.0'
info:
  title: OrganiCity Scenarios
  description: |
    This API specifies the API of the OrganiCity Scenario Tool.

    It comprises functionality for the following parts:
    - Authentication and authorisation
    - Querying and managing scenarios
    - Reviewing and evaluating scenarios
    - Administrative tasks like updating questionnaires

  version: 0.1.0-testing
host: dev.itm.uni-luebeck.de
basePath: /organicity-scenario-tool/api/v1
schemes:
  - http

securityDefinitions:
  cookieSession:
    type: apiKey
    in: header
    name: cookie
    description: |
      The Scenario Tool requires setting up a session prior to
      performing actions that require authorisation. This session is
      kept in a cookie of name `connect.sid`. This cookie can be
      acquired via the various login endpoints described in this
      document.
externalDocs:
  description: More information can be found on the OrganiCity website.
  url: http://www.organicity.eu/

tags:
  - name: Authentication
    description: |
      All endpoints that relate to authentication. These allow for
      registration, requesting authentication cookies via login (see
      Security) and invalidating those (via logout).
  - name: Questionnaires
    description: |
      Handling of questionnaires. These revolve around the
      [Questionnaire Objects](#/definitions/Questionnaire), and allow
      to review and update them.
  - name: Scenarios
    description: |
      Handling of scenarios involves several different ways of fetching
      lists of scenarios, fetching a single scenario and a multiple ways
      of editing them. Also, a set of operations to evaluate scenarios
      are included.

definitions:
  User:
    type: object
    description: A registered user.
    required: ['uuid']
    properties:
      uuid:
        description: The UUID of this user.
        type: string
        format: uuid
      name:
        description: 'The user''s name, by which she is refered to in the Gui.'
        type: string
      roles:
        description: |
          A list of roles that this user is assigned. These roles form
          the basis for access control, and should thusly be treated
          carefully.
        type: array
        items:
          type: string
      gender:
        description: |
          The user's gender. This might be `m` or `f`.
        type: string
        format: m or f
      local:
        description: |
          Information about the local-login authentication scheme for this user.
        type: object
        properties:
          email:
            description: |
              The email address that this user uses to log in via local login.
            type: string
            format: email
  Questionnaire:
    type: object
    description: A single questionnaire.
    required: ['version', 'author', 'explanation']
    properties:
      version:
        description:
          The version name of this questionnaire. The version is assigned by
          the server, where it is incremented by one for each new version
          posted.
        type: integer
        minimum: 1
        readOnly: true
      author:
        description:
          The UUID of the user that created this version of the questionnaire.
        type: string
        format: uuid
      description:
        description:
          A description of this questionnaire for internal use. This text is
          not displayed to the front end users.
        type: string
      explanation:
        description:
          An explanatory text that is shown to users at the top of the
          questionnaire.
        type: string
      questions:
        description: |
          The list of questions this questionnaire asks. These might
          be classified as technical or non-technical, and usually
          only the subset matching the user's choice should be
          displayed.
        type: array
        items:
          $ref: '#/definitions/Question'
    example: {
      "questions": [
        {
          "values": [
            {
              "weight": -1,
              "value": "This does not affect me."
            },
            {
              "weight": 0,
              "value": "Don't really know, maybe?"
            },
            {
              "weight": 1,
              "value": "Yes, I can use that."
            }
          ],
          "text": "Does this idea apply to your daily life?",
          "tech": false
        },
        {
          "values": [
            {
              "weight": -1,
              "value": "No"
            },
            {
              "weight": 1,
              "value": "Yes"
            }
          ],
          "text": "Is this scenario plausible?",
          "tech": true
        }
      ],
      "explanation":
        "Please rate the scenario provided from your personal perspective.",
      "description": "Second revision of initial questionnaire, fixed typos.",
      "version": 2
    }

  Question:
    type: object
    title: Question
    description: A single question belonging to a questionnaire.
    required: ['tech', 'text', 'value']
    properties:
      tech:
        description:
          true if this question is a question is a technical question
        type: boolean
      text:
        description:
          The question description that is shown to the user
        type: string
      value:
        description: The possible answers the user can choose from
        type: array
        items:
          type: object
          required: ['value', 'weight']
          properties:
            value:
              description:
                A textual description of the answer that is shown to the user
              type: string
            weight:
              description:
                The weight that this answer applies to the overall rating.
                Higher values will have a larger effect.
              type: integer
    example:
      {
        "text": "Are existing technologies capable of handling this scenario?",
        "tech": true,
        "values": [
          {
            "weight": 1,
            "value": "Yes"
          },
          {
            "weight": -1,
            "value": "No"
          }
        ]
      }

  Scenario:
    type: object
    title: Scenario
    description: |
      A scenario is a user story that describes a way, in which
      the OrganiCity data can be used to improve the user's city.
    required: ['uuid', 'version', 'title', 'summary', 'narrative', 'creator']
    properties:
      uuid:
        description: A unique uuid identifying this scenario.
        type: string
        format: uuid
        readOnly: true
      version:
        description: |
          This scenarios' version, used for identifying changes. This field
          is incremented by the server.
        readOnly: true
        type: integer
        minimum: 1
      title:
        description: The title of this scenario as plain text.
        type: string
      summary:
        description: The summary of this scenario as plain text.
        type: string
      narrative:
        description: |
          The narrative of this scenario, which may contain markdown formatting.
        type: string
      creator:
        description: The uuid of the user that initially created this scenario.
        type: string
        format: uuid
        readOnly: true
      timestamp:
        description: |
          The creation time of this scenario. If no time is given, this
          defaults to the current time.
        type: string
        format: date-time
        readOnly: true
      thumbnail:
        description:
          The name of the file containing the thumbnail of this scenario.
        type: string
        readOnly: true
      actors:
        description: The list of actors that are involved with this scenario.
        type: array
        items:
          type: string
      sectors:
        description: The list of sectors that this scenario belongs to.
        type: array
        items:
          type: string
      devices:
        description: The list of devices that this scenario employs.
        type: array
        items:
          type: string
      dataSources:
        description: The list of data sources that this scenario employs.
        type: array
        items:
          type: string

  DataSource:
    type: object
    title: Data Source
    description: A data source object is an descriptor of a source of data.
    required: ['uuid', 'href']
    properties:
      uuid:
        description: A unique uuid identifying this data source.
        type: string
        format: uuid
      href:
        description: A link to or url identifying the original data source.
        type: string
        format: url
      description:
        description:
          A textual description of this data source, which may contain
          markdown formatting.
        type: string


paths:
  /auth/currentUser:
    get:
      summary: Retrieves information about the current user
      description: |
        Returns the user record of the currently logged in user. If
        the current request does not provide authentication
        information, a forbidden-error is returned.
      tags:
        - Authentication
      produces:
        - application/json
      security:
        - cookieSession: []
      responses:
        200:
          description: |
            If the currently logged in user is a valid user, the
            record as stored in the database is returned.
          schema:
            $ref: '#/definitions/User'
        403:
          description: |
            If the request does not provide login information, reading
            user information is not allowed.

  /auth/local-login:
    get:
      summary: Local login with user/password credentials
      description: |
        This API can be used by locally registered users to log in, thereby
        setting the cookie for cookie session access control.

        Please note: This does not apply to user's registered via
        OAuth. These should use any of the `auth/{provider}`
        interfaces.

      tags:
        - Authentication

      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: login-data
          description: |
            A record containing the email address and passwort to log in with.
          in: body
          schema:
            type: object
            title: LoginInfo
            required: ['email', 'password']
            properties:
              email:
                description: The email address the user is registered with.
                type: string
                format: email
              password:
                description: 'The user''s password.'
                type: string
            example: {
              "email": "buether@itm.uni-luebeck.de",
              "password": "correcthorsebatterystaple"
            }
      responses:
        200:
          description: |
            If the login is performed successfully, this returns the
            currentUser.
          schema:
            $ref: '#/definitions/User'
        400:
          description:
            Bad Request is returned if the request body is malformed.
        422:
          description:
            This return code signifies that the given email address and/or the
            password is not known.
        500:
          description:
            This is returned if an internal error occurs during access checking.

  # /auth/signup:

  # /auth/facebook:
  # /auth/facebook/callback:
  # /auth/twitter:
  # /auth/twitter/callback:
  # /auth/google:
  # /auth/google/callback:
  # /auth/disqus:
  # /auth/disqus/callback:
  # /auth/github:
  # /auth/github/callback:
  # /auth/local:
  # /auth/login:

  # /users:
  # /users/info/:uuid:
  # /users/:uuid:
  # /users/:uuid/info:
  # /users/:uuid/thumbnail:
  # /users/:uuid/unlink/local:
  # /users/:uuid/unlink/facebook:
  # /users/:uuid/unlink/twitter:
  # /users/:uuid/unlink/google:
  # /users/:uuid/unlink/github:
  # /users/:uuid/unlink/disqus:
  # /users/forgot-password:
  # /users/update-password:

  # /upload/thumbnail:

  /scenarios:
    get:
      summary: Request a filtered, sorted list of scenarios
      description: |
        This endpoint is the default access to request a list of
        current scenarios according to various filters. It will always
        return the most current versions of a scenario; older versions
        can be requested through the appropriate other endpoints.

        This endpoint allows a couple of different filtering and sorting
        methods.
        These are in detail:
        - sortBy
        - sortDir
        - skip
        - limit
      tags:
        - Scenarios
      produces:
        - application/json
      parameters:
        # These parameters filter the scenario set.
        - name: keyword
          in: query
          description: |
            This allows a sort of full text search.

            <strong>TODO:</strong> describe correct name and behaviour.
          type: string

        # These are the various parameters to sort and paginate the results.
        - name: sortBy
          in: query
          description: |
            The field that the selected list of scenarios should be
            sorted by. The sorting is applied before `skip` and
            `limit` are evaulated.
          type: string
          format: fieldname
          enum: ['title', 'summary', 'narrative', 'creator', 'timestamp',
            'thumbnail', 'actors', 'sectors', 'devices', 'dataSources']
          default: timestamp
        - name: sortDir
          in: query
          description: |
            Specifies if the sorted field selected by `sortBy` is sorted
            in ascending (`asc`) or descending (`desc`) order.
          type: string
          enum: ['asc', 'desc']
          default: asc
        - name: skip
          in: query
          description: |
            In collaboration with `limit`, this parameter facilitates
            paging the returned scenarios. The value supplied for
            `skip` denotes the number of scenarios to skip after
            sorting.
          type: integer
          minimum: 0
        - name: limit
          in: query
          description: |
            Denotes the maximum number of scenarios to return. After
            the list of scenarios is filtered and sorted and `skip`
            scenarios have been discarded, this returns the first `n`
            remaining scenarios.
          type: integer
          minimum: 1
          maximum: 100

      responses:
        200:
          description: |
            The list of scenarios was successfully determined and extracted,
            and is returned in the body.
          schema:
            type: array
            title: Scenarios
            description: |
              The list of scenarios filtered, sorted and paginated
              according to the requests' parameters.
            items:
              $ref: '#/definitions/Scenario'


  # /scenarios/:uuid:
  # /scenarios/:uuid/thumbnail:
  # /actors:
  # /sectors:
  # /devices:
  # /scenarios/related/:uuid:
  # /scenarios/discus_statistics/:uuid:

  # /counter/:scope/:id:

  # /evaluations:
  # /evaluations/:uuid:
  # /evaluations/evaluations_score/:uuid:

  # /contactUs:


  /auth/logout:
    get:
      summary: Logs the current user out
      description: |
        This terminates the session of the cookie session access control.
      tags:
        - Authentication
      security:
        - cookieSession: []
      responses:
        204:
          description: Returned if the user is logged out successfully.



  /questionnaire?version=all:
    get:
      summary:
        Returns all questionnaire versions.
      description: |
        This is a special variant of [the
        `/questionnaire` request](#operation--questionnaire-get), but
        requests not a specific version, but all existing
        questionnaires.  Consequently, it returns a list of all
        available questionnaires, as opposed to one specific element.
      tags:
        - Questionnaires
      produces:
        - application/json
      responses:
        200:
          description: |
            If the request was successful, this returns a list of all
            questionnaires.
          schema:
            type: array
            title: Questionnaires
            description: |
              A list of [questionnaire](#/definitions/Questionnaire) objects.
            items:
              $ref: '#/definitions/Questionnaire'

  /questionnaire:
    get:
      summary:
        Returns the currently active questionnaire, or a list of all
        questionnaires if requested.
      description: If no version is supplied, this will return the current
        questionnaire. Usually, questionnaires are versioned in increasing
        numbers, so if the current questionnaire has version number 7,
        the previous versions can be requested by passing version as 6, 5,
        and so on.
      tags:
        - Questionnaires
      produces:
        - application/json
      parameters:
        - name: version
          in: query
          required: false
          description:
            The requested version, or 'all' if all versions should be returned.
          type: string
          format: Either 'all' or a version number.
      responses:
        200:
          description: |
            - If successful, this returns the current questionnaire if no
              version was specificed, or the questionnaire of the specified
              version.
            - If all versions are requested, this returns a list of
              questionnaire objects.
          schema:
            $ref: '#/definitions/Questionnaire'
        404:
          description:
            Returned if no questionnaire with the given version number exists.

    patch:
      summary: Updates the questionnaire. Only used for cosmetic updates.
      description: |
        Questionnairs may be updated in one of two methods:
        - Either, a
          completely new questionnaire can be established, completely
          abandoning the previous questionnaire, along with its results
          and evaluations.
        - Alternatively, a questionnare can be updated
          only cosmetically, thereby keeping the existing evaluations in
          place and their votes valid. A cosmetic update thus may only
          change wordings, and should not change the meaning of
          questions or answers.
        Patching the current questionnaire counts as a cosmetic update, and
        is bound by the above restrictions.
      tags:
        - Questionnaires
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - cookieSession: []
      parameters:
        - name: Questionnaire
          description: |
            The body of this request must contain the updated questionnaire.

            Please make sure that the update deviates from the previously
            current questionnaire only in minor aspects. In detail, this means
            that the following parts must not differ from the currently
            active questionnaire:
            - Number of questions
            - Number of answers per question
            - Weight of answers
          in: body
          schema:
            $ref: '#/definitions/Questionnaire'
      responses:
        200:
          description:
            The questionnaire has been updated. Returns the new questionnaire,
            including the updated version number.
          schema:
            title: Questionnaire
            $ref: '#/definitions/Questionnaire'
        401:
          description: The user is not authenticated.
        403:
          description:
            The authenticated user is not authorised, usually because he does
            not have an administrator role.
